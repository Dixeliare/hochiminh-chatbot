"""
PYTHON AI BACKEND - HCM THOUGHT CHATBOT
S·ª≠ d·ª•ng FastAPI ƒë·ªÉ t·∫°o REST API cho AI chatbot
T√≠ch h·ª£p RAG (Retrieval-Augmented Generation) v·ªõi Gemini AI
"""

# Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from .services.enhanced_rag_service import EnhancedRAGService
from .services.image_search_service import ImageSearchService

# ===== KH·ªûI T·∫†O FASTAPI APPLICATION =====
app = FastAPI(title="Enhanced HCM Thought Chatbot API", version="2.0.0")

# ===== C·∫§U H√åNH CORS =====
# Cho ph√©p .NET API (localhost:9000) g·ªçi Python API n√†y
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Trong production n√™n gi·ªõi h·∫°n origins
    allow_credentials=True,
    allow_methods=["*"],  # Cho ph√©p t·∫•t c·∫£ HTTP methods
    allow_headers=["*"],  # Cho ph√©p t·∫•t c·∫£ headers
)

# ===== KH·ªûI T·∫†O AI SERVICE =====
# Enhanced RAG service - k·∫øt h·ª£p t√¨m ki·∫øm tri th·ª©c v√† t·∫°o vƒÉn b·∫£n
rag_service = EnhancedRAGService()
# Image search service - t√¨m ki·∫øm ·∫£nh tr√™n Google
image_search_service = ImageSearchService()

# ===== DATA MODELS CHO API =====

class QuestionRequest(BaseModel):
    """Model cho request t·ª´ .NET API"""
    question: str  # C√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng

class EnhancedChatResponse(BaseModel):
    """Model cho response tr·∫£ v·ªÅ .NET API"""
    answer: str  # C√¢u tr·∫£ l·ªùi t·ª´ AI
    sources: list = []  # Danh s√°ch ngu·ªìn tham kh·∫£o
    confidence: int = 0  # ƒê·ªô tin c·∫≠y (0-100)
    last_updated: str = None  # Th·ªùi gian c·∫≠p nh·∫≠t knowledge base

class ImageSearchRequest(BaseModel):
    """Model cho request t√¨m ki·∫øm ·∫£nh"""
    query: str  # T·ª´ kh√≥a t√¨m ki·∫øm (VD: "H·ªì Ch√≠ Minh ·ªü Ph√°p")
    num_results: int = 5  # S·ªë l∆∞·ª£ng ·∫£nh (m·∫∑c ƒë·ªãnh 5)

class ImageSearchResponse(BaseModel):
    """Model cho response t√¨m ki·∫øm ·∫£nh"""
    images: list = []  # Danh s√°ch ·∫£nh
    query: str  # T·ª´ kh√≥a ƒë√£ t√¨m
    total: int = 0  # T·ªïng s·ªë ·∫£nh t√¨m ƒë∆∞·ª£c

# ===== LIFECYCLE EVENTS =====

@app.on_event("startup")
async def startup_event():
    """
    Kh·ªüi t·∫°o knowledge base khi server start
    T·∫£i v√† x·ª≠ l√Ω t·∫•t c·∫£ t√†i li·ªáu v·ªÅ t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh
    """
    print("üöÄ Starting Enhanced HCM Chatbot API...")
    rag_service.update_knowledge_base(force_update=True)
    print("‚úÖ Enhanced Server ready!")

# ===== API ENDPOINTS =====

@app.get("/")
async def root():
    """Root endpoint - th√¥ng tin c∆° b·∫£n v·ªÅ API"""
    return {"message": "Enhanced HCM Thought Chatbot API", "version": "2.0.0", "status": "running"}

@app.get("/health")
async def health_check():
    """Health check endpoint - ki·ªÉm tra t√¨nh tr·∫°ng AI service"""
    stats = rag_service.get_stats()
    return {"status": "healthy", "stats": stats}

@app.post("/chat", response_model=EnhancedChatResponse)
async def enhanced_chat(request: QuestionRequest):
    """
    MAIN CHAT ENDPOINT - X·ª≠ l√Ω c√¢u h·ªèi v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi AI

    Quy tr√¨nh:
    1. Validate input
    2. S·ª≠ d·ª•ng RAG service ƒë·ªÉ t√¨m ki·∫øm tri th·ª©c v√† t·∫°o c√¢u tr·∫£ l·ªùi
    3. N·∫øu RAG th·∫•t b·∫°i, fallback v·ªÅ Gemini tr·ª±c ti·∫øp
    4. Tr·∫£ v·ªÅ response v·ªõi sources v√† confidence score
    """
    try:
        # ===== VALIDATION =====
        if not request.question.strip():
            raise HTTPException(status_code=400, detail="C√¢u h·ªèi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")

        # ===== X·ª¨ L√ù V·ªöI RAG SERVICE =====
        try:
            # S·ª≠ d·ª•ng Enhanced RAG ƒë·ªÉ t·∫°o response v·ªõi ngu·ªìn tham kh·∫£o
            result = rag_service.generate_response_with_sources(request.question)

            return EnhancedChatResponse(
                answer=result["answer"],  # C√¢u tr·∫£ l·ªùi chi ti·∫øt
                sources=result["sources"],  # Ngu·ªìn tham kh·∫£o c√≥ c·∫•u tr√∫c
                confidence=result["confidence"],  # ƒê·ªô tin c·∫≠y
                last_updated=result.get("last_updated", "2024-01-01")
            )

        except Exception as rag_error:
            print(f"RAG service error: {rag_error}")

            # ===== FALLBACK: S·ª¨ D·ª§NG GEMINI TR·ª∞C TI·∫æP =====
            # Khi RAG service g·∫∑p l·ªói (th∆∞·ªùng do quota API), d√πng Gemini tr·ª±c ti·∫øp
            import google.generativeai as genai
            import os

            genai.configure(api_key=os.getenv("GEMINI_API_KEY"))
            model = genai.GenerativeModel('gemini-2.5-flash')

            # Prompt template cho fallback response
            prompt = f"""
            C√¢u h·ªèi v·ªÅ t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh: {request.question}

            H√£y tr·∫£ l·ªùi d·ª±a tr√™n ki·∫øn th·ª©c v·ªÅ t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh, bao g·ªìm:
            - ƒê·ªôc l·∫≠p d√¢n t·ªôc
            - Ch·ªß nghƒ©a x√£ h·ªôi
            - ƒê·∫°o ƒë·ª©c c√°ch m·∫°ng
            - D√¢n ch·ªß
            - ƒêo√†n k·∫øt d√¢n t·ªôc
            """

            response = model.generate_content(prompt)

            return EnhancedChatResponse(
                answer=response.text,
                sources=["Ki·∫øn th·ª©c chung v·ªÅ t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh"],  # Ngu·ªìn generic
                confidence=75,  # ƒê·ªô tin c·∫≠y th·∫•p h∆°n v√¨ kh√¥ng c√≥ RAG
                last_updated="2024-01-01"
            )

    except Exception as e:
        print(f"Error in enhanced chat endpoint: {e}")
        raise HTTPException(status_code=500, detail="L·ªói server, vui l√≤ng th·ª≠ l·∫°i")

@app.post("/search-image", response_model=ImageSearchResponse)
async def search_image(request: ImageSearchRequest):
    """
    IMAGE SEARCH ENDPOINT - T√¨m ki·∫øm ·∫£nh tr√™n Google Images

    Quy tr√¨nh:
    1. Validate input (t·ª´ kh√≥a t√¨m ki·∫øm)
    2. G·ªçi Google Custom Search API
    3. Tr·∫£ v·ªÅ danh s√°ch ·∫£nh v·ªõi URL, title, thumbnail

    Args:
        request: ImageSearchRequest v·ªõi query v√† num_results

    Returns:
        ImageSearchResponse v·ªõi danh s√°ch ·∫£nh
    """
    try:
        # ===== VALIDATION =====
        if not request.query.strip():
            raise HTTPException(status_code=400, detail="T·ª´ kh√≥a t√¨m ki·∫øm kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")

        # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng ·∫£nh
        num_results = min(request.num_results, 10)

        # ===== T√åM KI·∫æM ·∫¢NH =====
        images = image_search_service.search_images(request.query, num_results)

        return ImageSearchResponse(
            images=images,
            query=request.query,
            total=len(images)
        )

    except Exception as e:
        print(f"Error in image search endpoint: {e}")
        raise HTTPException(status_code=500, detail="L·ªói khi t√¨m ki·∫øm ·∫£nh, vui l√≤ng th·ª≠ l·∫°i")

# ===== SERVER ENTRY POINT =====
if __name__ == "__main__":
    """
    Ch·∫°y server tr·ª±c ti·∫øp (cho development)
    Trong production, s·ª≠ d·ª•ng: uvicorn app.main:app --host 0.0.0.0 --port 8000
    """
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
